const fs = require('fs-extra');
const path = require('path');
const AdmZip = require('adm-zip');
const sizeOf = require('image-size');

const epubDataPath = path.join(__dirname, '..', 'processed', 'epubData.json');

// Default base64 image
const defaultBase64Image = '/9j/4AAQSkZJRgABAQEAYABgAAD/4QLgRXhpZgAATU0AKgAAAAgABAE7AAIAAAAHAAABSodpAAQAAAABAAABUpydAAEAAAAOAAACyuocAAcAAAEMAAAAPgAAAAAc6gAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAV2lsYnVyAAAABZADAAIAAAAUAAACoJAEAAIAAAAUAAACtJKRAAIAAAADOTYAAJKSAAIAAAADOTYAAOocAAcAAAEMAAABlAAAAAAc6gAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAyNDowNzowNSAxNjowNzo0NQAyMDI0OjA3OjA1IDE2OjA3OjQ1AAAAVwBpAGwAYgB1AHIAAAD/4QQZaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49J++7vycgaWQ9J1c1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCc/Pg0KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyI+PHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj48cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0idXVpZDpmYWY1YmRkNS1iYTNkLTExZGEtYWQzMS1kMzNkNzUxODJmMWIiIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIvPjxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSJ1dWlkOmZhZjViZGQ1LWJhM2QtMTFkYS1hZDMxLWQzM2Q3NTE4MmYxYiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIj48eG1wOkNyZWF0ZURhdGU+MjAyNC0wNy0wNVQxNjowNzo0NS45NjI8L3htcDpDcmVhdGVEYXRlPjwvcmRmOkRlc2NyaXB0aW9uPjxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSJ1dWlkOmZhZjViZGQ1LWJhM2QtMTFkYS1hZDMxLWQzM2Q3NTE4MmYxYiIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIj48ZGM6Y3JlYXRvcj48cmRmOlNlcSB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPjxyZGY6bGk+V2lsYnVyPC9yZGY6bGk+PC9yZGY6U2VxPg0KCQkJPC9kYzpjcmVhdG9yPjwvcmRmOkRlc2NyaXB0aW9uPjwvcmRmOlJERj48L3g6eG1wbWV0YT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3hwYWNrZXQgZW5kPSd3Jz8+/9sAQwAHBQUGBQQHBgUGCAcHCAoRCwoJCQoVDxAMERgVGhkYFRgXGx4nIRsdJR0XGCIuIiUoKSssKxogLzMvKjInKisq/9sAQwEHCAgKCQoUCwsUKhwYHCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq/8AAEQgCNQIhAwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A+kaKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo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viJ/0MP/AJJW/wD8boA+vqK+Qf8AheXxE/6GH/ySt/8A43R/wvL4if8AQw/+SVv/APG6APr6ivkH/heXxE/6GH/ySt//AI3R/wALy+In/Qw/+SVv/wDG6APr6ivkH/heXxE/6GH/AMkrf/43R/wvL4if9DD/AOSVv/8AG6APob4yKW+EeubRnESn/wAfWvjmuz1f4t+Nte0m40zVta+0Wdyu2WP7JCu4deqoCPwNcZQB9Ffsxkf2Nrwzz9oiOP8AgJr3Svlz9nzxcNE8ZSaLcIWh1jaiMP4JFBI49CCR+VfUdABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABWZ4i8Pad4p0K40nWIRLbTrg+qHsynsR61p0UAfHnj/wCE+veBrqSUwvfaTkmO9hQkKPSQD7p/T0NcJX38QCCCMg9RXM6j8OPB2rSNJfeG9OeRzlnSARsx9SVwTQB8T0V9j/8ACnPAH/Qt2/8A39k/+Ko/4U54A/6Fu3/7+yf/ABVAHxxRX2P/AMKc8Af9C3b/APf2T/4qj/hTngD/AKFu3/7+yf8AxVAHxxRX2P8A8Kc8Af8AQt2//f2T/wCKo/4U54A/6Fu3/wC/sn/xVAHxxRX2P/wpzwB/0Ldv/wB/ZP8A4qj/AIU54A/6Fu3/AO/sn/xVAHxxRX2P/wAKc8Af9C3b/wDf2T/4qj/hTngD/oW7f/v7J/8AFUAfOHwdsri9+LGifZomkEExmkIH3EAOSf8APevsasfQPCeg+F4nTw/pVvYiT77Rr8z/AFY8n862KACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKK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ke13/ci/9HJXj3xy/wCS3af/ANcLb/0Y1ew/Gv8A5I9rv+5F/wCjkqH/AAfm/wA0aU/95X/bv6j/AINf8kh0H/rk/wD6MauW/aUiib4f6fK+PNTUVCHvgxvn+QrO8F/EW4+Hvw70m38V+HdQewaDzbO/09BIjoxLbX3FdrDPrz2qnqUusfHjxNpkVrpV1pvhOxk82W4uV2mbPXGOC2OAATjJJNa1Fzzsu/3amdJ8kLvt+hu/F6SWX9n2ykuM+a62bPn1KjNdx8M7WG0+GHh5LaJY1awikYKMZZlDMfqSSa5j4/osXwjmjjAVFuYFUDsAa6z4d/8AJNPDv/YNg/8AQBSi7+0f95fkK3KoLy/Uk8e/8k68Q/8AYNn/APRZrkv2f/8Akktr/wBfM3/oVdb49/5J14h/7Bs//os1yX7P/Pwktf8Ar5m/9CpR3l6L8y5/DH1f5D/EHxgSDxBNoHgzQrvxLqcB2zeQdsMRzg5YA5weD0HvXmnxe1r4ial4ThXxf4asdJ0r7WjRyRTK8hk2vhTiQ8YJ/hHTrVvwj4nf4K+INc0rxbot/Kl7ciS3vLaIMZgM4wWIDAg54OQcjFWvixruu+Ofh5LqNvoFxpWgWM8c3magu24uWJ2AqgyFQb8kknPGOhqHrFPfYtaTa9f6+Z7b4aJbwppJJyTZQkk9/kFadZnhn/kU9I/68Yf/AEWK062qfG/U56X8OPogoooqDQKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPn7WvDuv/ABJ+O0L6no2oWvh+wkCLLdWrxxvFGcnBYYO9vTsR6V9AgYGBwKKKFpFRB6ycgooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD//Z';

async function extractEpubData(processedDir) {
  const epubFiles = await fs.readdir(processedDir);
  const epubData = [];

  for (const file of epubFiles) {
    const filePath = path.join(processedDir, file);
    const fileStat = await fs.stat(filePath);
  
    if (fileStat.isFile() && file.endsWith('.epub')) {
      try {
        const zip = new AdmZip(filePath);
        const zipEntries = zip.getEntries();
        const metaData = { filename: file };
  
        let coverFound = false;
        let largestSize = 0; // Initialize largestSize outside the loop to maintain its state across entries
  
        zipEntries.forEach(entry => {
          if (entry.entryName.includes('cover') &&
            (entry.entryName.endsWith('.jpg') || entry.entryName.endsWith('.jpeg') ||
              entry.entryName.endsWith('.png') || entry.entryName.endsWith('.gif') ||
              entry.entryName.endsWith('.svg'))) {
            const imgBuffer = zip.readFile(entry);
            const dimensions = sizeOf(imgBuffer);
            metaData.cover = `data:image/${dimensions.type};base64,${imgBuffer.toString('base64')}`;
            coverFound = true;
          } else if (entry.entryName.endsWith('.jpg') || entry.entryName.endsWith('.jpeg') ||
            entry.entryName.endsWith('.png') || entry.entryName.endsWith('.gif') ||
            entry.entryName.endsWith('.svg')) {
            const imgBuffer = zip.readFile(entry);
            const dimensions = sizeOf(imgBuffer);
            const fileSize = imgBuffer.length;
  
            if (fileSize > largestSize) {
              largestSize = fileSize;
              metaData.cover = `data:image/${dimensions.type};base64,${imgBuffer.toString('base64')}`;
              coverFound = true;
            }
          }
  
          if (entry.entryName.includes('.opf')) {
            const content = zip.readAsText(entry);
            const titleMatch = content.match(/<dc:title>([^<]*)<\/dc:title>/);
            const authorMatch = content.match(/<dc:creator[^>]*>([^<]*)<\/dc:creator>/);
  
            if (titleMatch) {
              metaData.title = titleMatch[1];
            } else {
              // Set the title as the file name without the .epub suffix
              metaData.title = file.replace(/\.epub$/i, '');
            }
  
            if (authorMatch) {
              metaData.author = authorMatch[1];
            }
          }
        });
  
        if (!coverFound) {
          metaData.cover = `data:image/jpg;base64,${defaultBase64Image}`;
        }
  
        epubData.push(metaData);
      } catch (error) {
        console.error(`Error processing file ${filePath}: ${error.message}`);
        await fs.unlink(filePath);
        console.log(`Deleted corrupted file: ${filePath}`);
      }
    }
  }
  

  await fs.writeJson(epubDataPath, epubData);
}

async function getEpubs() {
  if (await fs.pathExists(epubDataPath)) {
    return fs.readJson(epubDataPath);
  } else {
    return [];
  }
}

module.exports = { extractEpubData, getEpubs };
